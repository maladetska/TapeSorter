#pragma once

#include <cstdint>
#include <filesystem>

namespace tape {

using TapeSize = uint32_t;
using MemorySize = uint32_t;

////////////////////////////////////////////////////////////////////////////////
/// \brief Tape interface.
///
/// \tparam T
////////////////////////////////////////////////////////////////////////////////
template <typename T>
class ITape {
 public:
  //////////////////////////////////////////////////////////////////////////////
  /// \brief ITape destructor.
  //////////////////////////////////////////////////////////////////////////////
  virtual ~ITape() {};

  //////////////////////////////////////////////////////////////////////////////
  /// \brief Read and get the element from cell indicated by the magnetic head.
  ///
  /// \return element indicated by the magnetic head
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] virtual T ReadCell() = 0;

  //////////////////////////////////////////////////////////////////////////////
  /// \brief Put a new element to the current cell of the tape.
  ///
  /// \param element new element.
  //////////////////////////////////////////////////////////////////////////////
  virtual void WriteToCell(const T&) = 0;

  //////////////////////////////////////////////////////////////////////////////
  /// \brief Move the tape under the magnetic head to the right. After
  /// execution, the tape element will be one position to the left under the
  /// magnetic head.
  ///
  /// \return true if the move succeeded else false.
  //////////////////////////////////////////////////////////////////////////////
  virtual bool MoveRight() = 0;

  //////////////////////////////////////////////////////////////////////////////
  /// \brief Move the tape under the magnetic head to the left.After execution,
  /// the tape element will be one position to the right under the magnetic
  /// head.
  ///
  /// \return true if the move succeeded else false.
  //////////////////////////////////////////////////////////////////////////////
  virtual bool MoveLeft() = 0;
};
}  // namespace tape
